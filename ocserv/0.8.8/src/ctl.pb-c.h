/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ctl.proto */

#ifndef PROTOBUF_C_ctl_2eproto__INCLUDED
#define PROTOBUF_C_ctl_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _StatusRep StatusRep;
typedef struct _BoolMsg BoolMsg;
typedef struct _UserInfoRep UserInfoRep;
typedef struct _UserListRep UserListRep;
typedef struct _UsernameReq UsernameReq;
typedef struct _IdReq IdReq;


/* --- enums --- */


/* --- messages --- */

struct  _StatusRep
{
  ProtobufCMessage base;
  protobuf_c_boolean status;
  uint32_t pid;
  uint32_t sec_mod_pid;
  uint32_t active_clients;
  uint32_t start_time;
  uint32_t stored_cookies;
  uint32_t stored_tls_sessions;
};
#define STATUS_REP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&status_rep__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _BoolMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean status;
};
#define BOOL_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bool_msg__descriptor) \
    , 0 }


struct  _UserInfoRep
{
  ProtobufCMessage base;
  int32_t id;
  char *username;
  char *groupname;
  char *ip;
  char *tun;
  char *remote_ip;
  char *local_ip;
  char *remote_ip6;
  char *local_ip6;
  uint32_t conn_time;
  char *hostname;
  char *user_agent;
  char *status;
  char *tls_ciphersuite;
  char *dtls_ciphersuite;
  protobuf_c_boolean has_rx_per_sec;
  uint32_t rx_per_sec;
  protobuf_c_boolean has_tx_per_sec;
  uint32_t tx_per_sec;
  size_t n_dns;
  char **dns;
  size_t n_nbns;
  char **nbns;
  size_t n_routes;
  char **routes;
  size_t n_iroutes;
  char **iroutes;
};
#define USER_INFO_REP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_info_rep__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _UserListRep
{
  ProtobufCMessage base;
  size_t n_user;
  UserInfoRep **user;
};
#define USER_LIST_REP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_list_rep__descriptor) \
    , 0,NULL }


struct  _UsernameReq
{
  ProtobufCMessage base;
  char *username;
};
#define USERNAME_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&username_req__descriptor) \
    , NULL }


struct  _IdReq
{
  ProtobufCMessage base;
  int32_t id;
};
#define ID_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&id_req__descriptor) \
    , 0 }


/* StatusRep methods */
void   status_rep__init
                     (StatusRep         *message);
size_t status_rep__get_packed_size
                     (const StatusRep   *message);
size_t status_rep__pack
                     (const StatusRep   *message,
                      uint8_t             *out);
size_t status_rep__pack_to_buffer
                     (const StatusRep   *message,
                      ProtobufCBuffer     *buffer);
StatusRep *
       status_rep__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   status_rep__free_unpacked
                     (StatusRep *message,
                      ProtobufCAllocator *allocator);
/* BoolMsg methods */
void   bool_msg__init
                     (BoolMsg         *message);
size_t bool_msg__get_packed_size
                     (const BoolMsg   *message);
size_t bool_msg__pack
                     (const BoolMsg   *message,
                      uint8_t             *out);
size_t bool_msg__pack_to_buffer
                     (const BoolMsg   *message,
                      ProtobufCBuffer     *buffer);
BoolMsg *
       bool_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bool_msg__free_unpacked
                     (BoolMsg *message,
                      ProtobufCAllocator *allocator);
/* UserInfoRep methods */
void   user_info_rep__init
                     (UserInfoRep         *message);
size_t user_info_rep__get_packed_size
                     (const UserInfoRep   *message);
size_t user_info_rep__pack
                     (const UserInfoRep   *message,
                      uint8_t             *out);
size_t user_info_rep__pack_to_buffer
                     (const UserInfoRep   *message,
                      ProtobufCBuffer     *buffer);
UserInfoRep *
       user_info_rep__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_info_rep__free_unpacked
                     (UserInfoRep *message,
                      ProtobufCAllocator *allocator);
/* UserListRep methods */
void   user_list_rep__init
                     (UserListRep         *message);
size_t user_list_rep__get_packed_size
                     (const UserListRep   *message);
size_t user_list_rep__pack
                     (const UserListRep   *message,
                      uint8_t             *out);
size_t user_list_rep__pack_to_buffer
                     (const UserListRep   *message,
                      ProtobufCBuffer     *buffer);
UserListRep *
       user_list_rep__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_list_rep__free_unpacked
                     (UserListRep *message,
                      ProtobufCAllocator *allocator);
/* UsernameReq methods */
void   username_req__init
                     (UsernameReq         *message);
size_t username_req__get_packed_size
                     (const UsernameReq   *message);
size_t username_req__pack
                     (const UsernameReq   *message,
                      uint8_t             *out);
size_t username_req__pack_to_buffer
                     (const UsernameReq   *message,
                      ProtobufCBuffer     *buffer);
UsernameReq *
       username_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   username_req__free_unpacked
                     (UsernameReq *message,
                      ProtobufCAllocator *allocator);
/* IdReq methods */
void   id_req__init
                     (IdReq         *message);
size_t id_req__get_packed_size
                     (const IdReq   *message);
size_t id_req__pack
                     (const IdReq   *message,
                      uint8_t             *out);
size_t id_req__pack_to_buffer
                     (const IdReq   *message,
                      ProtobufCBuffer     *buffer);
IdReq *
       id_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   id_req__free_unpacked
                     (IdReq *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*StatusRep_Closure)
                 (const StatusRep *message,
                  void *closure_data);
typedef void (*BoolMsg_Closure)
                 (const BoolMsg *message,
                  void *closure_data);
typedef void (*UserInfoRep_Closure)
                 (const UserInfoRep *message,
                  void *closure_data);
typedef void (*UserListRep_Closure)
                 (const UserListRep *message,
                  void *closure_data);
typedef void (*UsernameReq_Closure)
                 (const UsernameReq *message,
                  void *closure_data);
typedef void (*IdReq_Closure)
                 (const IdReq *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor status_rep__descriptor;
extern const ProtobufCMessageDescriptor bool_msg__descriptor;
extern const ProtobufCMessageDescriptor user_info_rep__descriptor;
extern const ProtobufCMessageDescriptor user_list_rep__descriptor;
extern const ProtobufCMessageDescriptor username_req__descriptor;
extern const ProtobufCMessageDescriptor id_req__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ctl_2eproto__INCLUDED */
