#!/bin/sh
#
# Copyright (C) 2015 Red Hat
#
# This file is part of ocserv.
#
# ocserv is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# ocserv is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GnuTLS; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

SERV="${SERV:-../src/ocserv}"
srcdir=${srcdir:-.}
PORT=4499

. `dirname $0`/common.sh

echo "Testing whether cookies will expire as expected... "
rm -f ${srcdir}/pid1.$$

launch_server -d 1 -f -c ${srcdir}/test-cookie-timeout.config & PID=$!
wait_server $PID

echo "Connecting to obtain cookie... "
eval `echo "test" | openconnect -q localhost:$PORT -u test --authenticate --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3`

if [ -z "$COOKIE" ];then
	fail $PID "Could not obtain cookie"
fi

#echo "Cookie: $COOKIE"
sleep 10
echo ""
echo "Connecting with cookie... "
echo "test" | openconnect -q -b localhost:$PORT -u test -C "$COOKIE" --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 --script=/bin/true --verbose --pid-file ${srcdir}/pid1.$$ &

sleep 4

if [ ! -f ${srcdir}/pid1.$$ ];then
	fail $PID "It was not possible to establish session!"
fi

CPID=`cat ${srcdir}/pid1.$$`
kill $CPID
rm -f "${srcdir}/pid1.$$"
wait $CPID

sleep 10
echo ""
echo "Connecting again with cookie... "
echo "test" | openconnect -b -q localhost:$PORT -u test -C "$COOKIE" --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 --script=/bin/true --verbose --pid-file ${srcdir}/pid1.$$ &

sleep 4

if [ ! -f ${srcdir}/pid1.$$ ];then
	fail $PID "It was not possible to establish second session!"
fi

CPID=`cat ${srcdir}/pid1.$$`
kill -9 $CPID
rm -f "${srcdir}/pid1.$$"
wait $CPID

sleep 10
echo ""
echo "Connecting after forced kill with cookie... "
echo "test" | openconnect -b -q localhost:$PORT -u test -C "$COOKIE" --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 --script=/bin/true --verbose --pid-file ${srcdir}/pid1.$$ &

sleep 4

if [ ! -f ${srcdir}/pid1.$$ ];then
	fail $PID "It was not possible to establish third session!"
fi

CPID=`cat ${srcdir}/pid1.$$`
kill $CPID
rm -f "${srcdir}/pid1.$$"
wait $CPID


sleep 40
echo ""
echo "Connecting with cookie after expiration... "
echo "test" | openconnect -q -b localhost:$PORT -u test -C "$COOKIE" --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 --script=/bin/true --verbose --pid-file ${srcdir}/pid1.$$ &

sleep 4

if [ -f ${srcdir}/pid1.$$ ];then
	fail $PID "Session was established with expired cookie!"
	CPID=`cat ${srcdir}/pid1.$$`
	kill $CPID
	rm -f "${srcdir}/pid1.$$"
	wait $CPID
fi

# test cookie verification after cookie verification failure. That is to verify whether
# the channel between main and sec-mod is in consistent state.
echo "Connecting (again) to obtain cookie... "
echo "test" | openconnect -q localhost:$PORT -u test --authenticate --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3

if test $? != 0;then
	fail $PID "Could not obtain cookie"
fi

kill $PID
wait

rm -f "${srcdir}/pid1.$$"

exit 0
